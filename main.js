/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ArcheryPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var ArcheryPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.directoryPath = ".";
  }
  // Default directory path
  async onload() {
    new import_obsidian.Notice("plugin loading");
    this.addCommand({
      id: "total-arrow-scores",
      name: "Total Arrow Scores",
      callback: () => this.totalArrowScores()
    });
    new import_obsidian.Notice("command added");
    await this.loadSettings();
    new import_obsidian.Notice("settings tab loaded");
    this.addSettingTab(new ArcherySettingsTab(this.app, this));
  }
  async loadSettings() {
    const data = await this.loadData();
    try {
      this.directoryPath = data.directoryPath;
    } catch (e) {
      this.directoryPath = ".";
    }
  }
  async saveSettings() {
    await this.saveData({ directoryPath: this.directoryPath });
  }
  totalArrowScores() {
    const activeFile = this.app.workspace.getActiveFile();
    if (activeFile) {
      const fileName = activeFile.basename;
      console.log(`Currently opened file: ${fileName}`);
      const command = `python3 ${this.directoryPath}arrowscores.py total ${fileName}`;
      new import_obsidian.Notice(`python3 ${this.directoryPath}arrowscores.py total ${fileName}`);
      new import_obsidian.Notice(`Totaling arrow scores contained in ${fileName}...`);
      new import_obsidian.Notice("ping");
      (0, import_child_process.exec)(command, (error, stdout, stderr) => {
        if (error) {
          console.error(`exec error: ${error}`);
          new import_obsidian.Notice(`${error} error`);
          return;
        }
        console.log(`stdout: ${stdout}`);
        console.log(`stderr: ${stderr}`);
      });
    } else {
      console.warn("No active file opened");
      new import_obsidian.Notice("No active file opened");
    }
  }
};
var ArcherySettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Archery Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Working Directory").setDesc("Specify the directory where the arrow scores should be totaled.").addText((text) => text.setPlaceholder("/path/to/your/directory").setValue(this.plugin.directoryPath).onChange(async (value) => {
      this.plugin.directoryPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
